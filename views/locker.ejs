<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Locker Emulator</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://unpkg.com/html5-qrcode"></script>
</head>

<body class="bg-gray-50 flex flex-col items-center min-h-screen px-4">
  <% if (messages.success && messages.success.length > 0) { %>
    <div class="alert alert-success"><%= messages.success[0] %></div>
  <% } %>

  <% if (messages.error && messages.error.length > 0) { %>
    <div class="alert alert-danger"><%= messages.error[0] %></div>
  <% } %>

  <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mt-6 mb-4 text-center">
    Locker <%= lockerId %>
  </h1>

  <!-- QR Scanner -->
  <div id="qr-reader" class="w-full max-w-sm md:max-w-md border border-gray-300 shadow-md rounded-lg overflow-hidden mb-4"></div>
  <div id="qr-result" class="text-sm text-blue-700 font-semibold mb-6 text-center"></div>

  <!-- Locker Grid -->
  <div class="w-full max-w-7xl">
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-4 md:p-6 bg-gray-100 rounded-xl shadow-xl">
      <% compartments.forEach(compartment => { %>
        <% 
          let heightClass;
          if (compartment.size === "small") heightClass = "h-48";
          else if (compartment.size === "medium") heightClass = "h-64";
          else if (compartment.size === "large") heightClass = "h-80";
          else heightClass = "h-60";
        %>
        <div class="bg-white border-4 <%= compartment.isLocked ? 'border-red-600' : 'border-green-600' %> rounded-xl p-4 flex flex-col justify-between items-center w-full shadow-md hover:shadow-lg transition-shadow duration-300 <%= heightClass %>">
          <div class="text-center">
            <div class="text-lg md:text-xl font-semibold text-gray-800">
              Locker <%= compartment.compartmentId %>
            </div>
            <div class="text-sm md:text-base font-medium mt-2 <%= compartment.isLocked ? 'text-red-600' : 'text-green-600' %>">
              <%= compartment.isLocked ? 'Locked' : 'Unlocked' %>
            </div>
            <div class="text-xs md:text-sm text-gray-500 mt-1">
              Size: <%= compartment.size.charAt(0).toUpperCase() + compartment.size.slice(1) %>
            </div>
          </div>

          <% if (compartment.isBooked) { %>
          <form method="POST" action="/locker/unlock/<%= lockerId %>/<%= compartment.compartmentId %>" class="w-full mt-2">
            <input type="text" name="otp" placeholder="Enter OTP" class="w-full p-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
            <button type="submit" class="w-full mt-2 p-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm font-medium transition-colors duration-200">
              Unlock via OTP
            </button>
          </form>
          <% } %>

          <div class="flex justify-between w-full mt-3 gap-2">
            <form method="POST" action="/locker/lock" class="w-1/2">
              <input type="hidden" name="lockerId" value="<%= lockerId %>" />
              <input type="hidden" name="compartmentId" value="<%= compartment.compartmentId %>" />
              <button class="w-full p-2 bg-red-500 text-white rounded-md hover:bg-red-600 text-sm font-medium">
                Lock
              </button>
            </form>

            <form method="POST" action="/locker/unlock-direct" class="w-1/2">
              <input type="hidden" name="lockerId" value="<%= lockerId %>" />
              <input type="hidden" name="compartmentId" value="<%= compartment.compartmentId %>" />
              <button class="w-full p-2 bg-green-500 text-white rounded-md hover:bg-green-600 text-sm font-medium">
                Unlock
              </button>
            </form>
          </div>

          <form method="POST" action="/locker/status" class="w-full mt-2">
            <input type="hidden" name="lockerId" value="<%= lockerId %>" />
            <input type="hidden" name="compartmentId" value="<%= compartment.compartmentId %>" />
            <button class="w-full p-2 bg-yellow-500 text-white rounded-md hover:bg-yellow-600 text-sm font-medium">
              Send Status
            </button>
          </form>
        </div>
      <% }) %>
    </div>
  </div>

  <!-- QR Scan Script -->
 <script>
const html5QrCode = new Html5Qrcode("qr-reader");

function restartScannerWithDelay(seconds) {
  let countdown = seconds;
  const qrResult = document.getElementById("qr-result");
  qrResult.textContent = `Retrying in ${countdown} seconds...`;

  const interval = setInterval(() => {
    countdown--;
    qrResult.textContent = `Retrying in ${countdown} seconds...`;
    if (countdown === 0) {
      clearInterval(interval);
      html5QrCode.start(
        { facingMode: "environment" },
        { fps: 10, qrbox: 250 },
        onScanSuccess
      )
      .then(() => {
        qrResult.textContent = "Scanner restarted. Scan a QR code.";
      })
      .catch((err) => {
        console.error("Scanner failed to restart:", err);
        qrResult.textContent = "Failed to restart scanner.";
      });
    }
  }, 1000);
}

async function onScanSuccess(decodedText) {
  await html5QrCode.stop();
  const qrResult = document.getElementById("qr-result");
  qrResult.textContent = "QR Code Scanned.";

  try {
    // Always expect JSON
    const data = JSON.parse(decodedText);
    const accessCode = data.accessCode;

    if (!accessCode) {
      throw new Error("Access code not found in QR.");
    }

    const response = await fetch("/api/locker/scan", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ accessCode })
    });

    const result = await response.json();

    if (response.ok && result.success) {
      alert(`✅ ${result.message}\nCompartment: ${result.compartmentId}`);
      location.reload();
    } else {
      alert(`❌ ${result.message || "Invalid QR"} | Retrying...`);
      restartScannerWithDelay(5);
    }
  } catch (err) {
    console.error("Error during scan:", err);
    alert("❌ Error processing QR code. Retrying...");
    restartScannerWithDelay(5);
  }
}

html5QrCode.start(
  { facingMode: "environment" },
  { fps: 10, qrbox: 250 },
  onScanSuccess
)
.catch((err) => {
  console.error("Scanner failed to start:", err);
});
</script>

</body>
</html>
