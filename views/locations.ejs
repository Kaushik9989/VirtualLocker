

<% layout("/layouts/boilerplate") %>

<link
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
  integrity="sha256-Vt4yZf+0dsN0I4WIEzYf7Y9mHAX9rKkRQ06uO42L5bI="
  crossorigin=""
/>

<style>
  .location-card.highlighted {
  outline: 3px solid #007bff;
  transition: outline 0.3s ease;
}

html, body {
  margin: 0 !important;
  padding: 0 !important;
  height: 100%;
  width: 100%;
  overflow: hidden;
  box-sizing: border-box;
}


.main-layout {
  position: relative;
   width: 100vw !important;  /* ‚úÖ Fixed */
  height: 100vh;
}
body {
  overflow-x: hidden;
}
#locker-map {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
}
  .left-sidebar {
    position: fixed;
    margin-top: 8px;
    margin-left: 8px;
    top: 70px;
    width: 340px; 
    max-height: calc(100vh - 140px);
    overflow-y: auto;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(8px); 
    border-radius: 5px 5px;
    padding: 1rem;
    padding-bottom: 70px;
    z-index: 1001;

  } 

  .location-card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
    padding: 1rem;
    margin-bottom: 1rem;
    transition: transform 0.2s ease;
  }

  .location-card:hover {
    transform: translateY(-4px);
  }

  .location-header {
    display: flex;
    justify-content: space-between;
    font-weight: 600;
    font-size: 0.95rem;
    margin-bottom: 0.4rem;
  }

  .location-sub {
    color: #6b7280;
    margin-bottom: 0.4rem;
    font-size: 0.85rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .location-details {
    font-size: 0.8rem;
    color: #4b5563;
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
    margin-bottom: 0.4rem;
  }

  .card-actions {
    display: flex;
    flex-direction: column;
    gap: 0.4rem;
  }

  .leaflet-control-recenter {
     position: fixed;
  top: 80px;    /* desktop */
  right: 20px;
  z-index: 2000 !important;  /* <- bumped */
    background: #007bff;
    color: white;
    border: none;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-size: 0.9rem;
    cursor: pointer;
    transition: background 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    z-index: 1002 !important;
    position: fixed;
    top: 80px;
    right: 20px;
  }

  .leaflet-control-recenter:hover {
    background: #0056b3;
  }
  
@media (max-width: 768px) {
  .leaflet-control-recenter {
    top: 78px !important;    /* just below header */
    right: 16px !important;
    bottom: auto !important;
  }
}

  .leaflet-marker-bounce {
    animation: bounce 0.6s infinite alternate;
    z-index: 1003 !important;
  }

  @keyframes bounce {
    0% { transform: translateY(0); }
    100% { transform: translateY(-15px); }
  }

  @media (max-width: 768px) {
    .left-sidebar {
      width: 90%;
      left: 5%;
      top: auto !important;
      bottom: 70px;
      max-height: 36vh;
      padding-bottom: 80px;
    }


    .location-card {
      padding: 0.75rem;
    }

    .location-header {
      flex-direction: column;
      font-size: 0.9rem;
      gap: 0.25rem;
    }

    .location-sub {
      font-size: 0.8rem;
      white-space: normal;
    }

    .location-details {
      font-size: 0.75rem;
      gap: 0.3rem;
    }

    .card-actions {
      gap: 0.3rem;
    }

    .card-actions .btn {
      font-size: 0.8rem;
      padding: 0.4rem;
    }
  }
</style>


<div class="main-layout ">
  <div id="locker-map"></div>

  <div class="left-sidebar">
    <h5 class="fw-bold mb-3">üìç Nearby Lockers</h5>
    <% lockers.forEach(locker => { %>
      <div class="location-card" data-locker-id="<%= locker.lockerId %>">
        <div class="location-header">
          <span><%= locker.lockerId %></span>
          <span class="text-success fw-semibold">
            Available: <%= locker.compartments.filter(c => !c.isBooked).length %>/<%= locker.compartments.length %>
          </span>
        </div>
        <div class="location-sub">
          <%= locker.location?.address || 'Address not available' %>
        </div>
        <div class="location-details">
          <% if (locker.location?.lat && locker.location?.lng) { %>
            <span>
              <i class="fas fa-map-marker-alt"></i>
              <%= locker.location.lat.toFixed(5) %>, <%= locker.location.lng.toFixed(5) %>
            </span>
          <% } else { %>
            <span>No Coordinates</span>
          <% } %>
        </div>
        <div class="card-actions">
          <a href="https://www.google.com/maps/dir/?api=1&destination=<%= locker.location.lat %>,<%= locker.location.lng %>"
            target="_blank" class="btn btn-outline-dark">
            <i class="fas fa-location-arrow"></i> Directions
          </a>
          <a href="/locker/<%= locker.lockerId %>" class="btn btn-warning">
            <i class="fas fa-check-circle"></i> Select Locker
          </a>
        </div>
      </div>
    <% }) %>
  </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-1A4e1S43i+rpymzKQ8CE2Y8GABZ1p26b0gShmYPQHsg=" crossorigin=""></script>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-1A4e1S43i+rpymzKQ8CE2Y8GABZ1p26b0gShmYPQHsg=" crossorigin=""></script>

<script>
  let map;
  const markerMap = {};
  let isManualScroll = false;

  const CACHE_KEY = "lockerCache";
  const CACHE_TTL_MS = 5 * 60 * 1000; // 5 min

  // Try loading cached lockers
  let lockers = [];
  const cached = localStorage.getItem(CACHE_KEY);
  if (cached) {
    const { data, timestamp } = JSON.parse(cached);
    if (Date.now() - timestamp < CACHE_TTL_MS) {
      lockers = data;
    } else {
      localStorage.removeItem(CACHE_KEY);
    }
  }

  // Fallback to server data
  if (!lockers || lockers.length === 0) {
    lockers = <%- JSON.stringify(lockers) %>;
  }

  function recenterToUser() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const lng = position.coords.longitude;
          const offsetLat = lat - 0.01;
          map.setView([offsetLat, lng], 14);
          map.invalidateSize();
        },
        () => alert("Unable to access your location.")
      );
    } else alert("Geolocation is not supported by your browser.");
  }

  document.addEventListener("DOMContentLoaded", function () {
    map = L.map('locker-map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      maxZoom: 18
    }).addTo(map);

    // Add recenter control
    const RecenterControl = L.Control.extend({
      options: { position: 'topright' },
      onAdd: function () {
        const container = L.DomUtil.create('div', 'leaflet-control-recenter');
        container.innerHTML = '<i class="fas fa-crosshairs"></i> Recenter to User';
        container.onclick = () => recenterToUser();
        L.DomEvent.disableClickPropagation(container);
        return container;
      }
    });
    map.addControl(new RecenterControl());

    const sidebar = document.querySelector(".left-sidebar");

    // Show loading spinner
    sidebar.innerHTML = `
      <div class="text-center text-muted my-5">
        <div class="spinner-border text-primary mb-3"></div>
        <div>Loading nearby lockers...</div>
      </div>
    `;

    navigator.geolocation.getCurrentPosition(success, error);

    function success(position) {
      const userLat = position.coords.latitude;
      const userLng = position.coords.longitude;

      const userIcon = L.icon({
        iconUrl: "https://cdn-icons-png.flaticon.com/512/1946/1946429.png",
        iconSize: [35, 35],
        iconAnchor: [17, 34],
        popupAnchor: [0, -30],
      });

      const userMarker = L.marker([userLat, userLng], { icon: userIcon })
        .addTo(map)
        .bindPopup(`<b>üìç You are here</b> <a href="/profile" target="_blank">View Profile</a>`)
        .openPopup();

      userMarker.on("click", () => window.location.href = "/profile");

      map.setView([userLat - 0.01, userLng], 14);
      map.invalidateSize();

      // Calculate distances and sort
      lockers = lockers.map(locker => {
        if (locker.location?.lat && locker.location?.lng) {
          const distance = getDistanceFromLatLonInKm(userLat, userLng, locker.location.lat, locker.location.lng);
          return { ...locker, distance };
        }
        return { ...locker, distance: Infinity };
      }).sort((a, b) => a.distance - b.distance);

      // Save fresh data to cache
      localStorage.setItem(CACHE_KEY, JSON.stringify({
        data: lockers,
        timestamp: Date.now()
      }));

      renderSidebar(lockers);
      showNearestLockers(userLat, userLng);
    }

    function error() {
      alert("Could not get your location.");
      map.setView([20.5937, 78.9629], 5);
      map.invalidateSize();
      renderSidebar(lockers);
      showNearestLockers(null, null);
    }

    function renderSidebar(lockers) {
      sidebar.innerHTML = `<h5 class="fw-bold mb-3">üìç Nearby Lockers</h5>`;
      lockers.forEach(locker => {
        const available = locker.compartments.filter(c => !c.isBooked).length;
        const card = document.createElement("div");
        card.className = "location-card";
        card.setAttribute("data-locker-id", locker.lockerId);
        card.innerHTML = `
          <div class="location-header">
            <span>${locker.lockerId}</span>
            <span class="text-success fw-semibold">
              Available: ${available}/${locker.compartments.length}
            </span>
          </div>
          <div class="location-sub">
            ${locker.location?.address || 'Address not available'}
          </div>
          <div class="location-details">
            ${locker.location?.lat && locker.location?.lng ?
              `<span><i class="fas fa-map-marker-alt"></i> ${locker.location.lat.toFixed(5)}, ${locker.location.lng.toFixed(5)}</span>` :
              `<span>No Coordinates</span>`}
          </div>
          <div class="card-actions">
            <a href="https://www.google.com/maps/dir/?api=1&destination=${locker.location?.lat},${locker.location?.lng}" target="_blank" class="btn btn-outline-dark">
              <i class="fas fa-location-arrow"></i> Directions
            </a>
            <a href="/locker/${locker.lockerId}" class="btn btn-warning">
              <i class="fas fa-check-circle"></i> Select Locker
            </a>
          </div>
        `;
        sidebar.appendChild(card);
      });
    }

    function showNearestLockers(userLat, userLng) {
      const radiusInKm = 80;
      lockers.forEach(locker => {
        if (locker.location?.lat && locker.location?.lng) {
          const lat = locker.location.lat;
          const lng = locker.location.lng;
          const marker = L.marker([lat, lng]).addTo(map);
          markerMap[locker.lockerId] = marker;

          marker.on("click", () => {
            highlightCard(locker.lockerId);
            map.panTo([lat, lng]);
          });
        }
      });
    }

    function highlightCard(lockerId) {
      const card = document.querySelector(`.location-card[data-locker-id="${lockerId}"]`);
      if (card) {
        const offset = card.offsetTop;
        isManualScroll = true;
        sidebar.scrollTo({ top: offset - 12, behavior: 'smooth' });
        card.classList.add('highlighted');
        setTimeout(() => card.classList.remove('highlighted'), 1500);
        setTimeout(() => isManualScroll = false, 500);
      }
    }

    function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
      const R = 6371;
      const dLat = deg2rad(lat2 - lat1);
      const dLon = deg2rad(lon2 - lon1);
      const a =
        Math.sin(dLat / 2) ** 2 +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) ** 2;
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      return R * c;
    }

    function deg2rad(deg) {
      return deg * (Math.PI / 180);
    }

    function debounce(func, delay) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
      };
    }

    map.on('moveend', debounce(() => {
      if (isManualScroll) return;
      const center = map.getCenter();
      let closestLocker = null;
      let minDistance = Infinity;
      lockers.forEach(locker => {
        if (locker.location?.lat && locker.location?.lng) {
          const dist = getDistanceFromLatLonInKm(center.lat, center.lng, locker.location.lat, locker.location.lng);
          if (dist < minDistance) {
            minDistance = dist;
            closestLocker = locker;
          }
        }
      });
      if (closestLocker) highlightCard(closestLocker.lockerId);
      map.invalidateSize();
    }, 300));

    sidebar.addEventListener("scroll", debounce(() => {
      if (isManualScroll) return;
      const cards = Array.from(document.querySelectorAll(".location-card"));
      const sidebarTop = sidebar.getBoundingClientRect().top;
      let closestCard = null;
      let minOffset = Infinity;
      cards.forEach(card => {
        const offset = Math.abs(card.getBoundingClientRect().top - sidebarTop);
        if (offset < minOffset) {
          minOffset = offset;
          closestCard = card;
        }
      });
      if (closestCard) {
        const lockerId = closestCard.getAttribute("data-locker-id");
        const locker = lockers.find(l => l.lockerId === lockerId);
        if (locker?.location?.lat && locker?.location?.lng) {
          isManualScroll = true;
          map.panTo([locker.location.lat, locker.location.lng]);
          setTimeout(() => isManualScroll = false, 300);
        }
      }
    }, 200));
  });
</script>
